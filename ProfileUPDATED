//
//  ViewController.swift
//  InquireProfile
//
//  Created by Arvin Zhang on 12/26/20.
//

import UIKit
import Firebase
import GoogleSignIn


class ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
    
    @IBOutlet weak var profileTableView: UITableView!

    @IBOutlet weak var questionsButton: UIButton!
    
    @IBOutlet weak var answersButton: UIButton!

    @IBOutlet weak var profileImg: UIImageView!
    
    @IBOutlet weak var rankingImg: UIImageView!

    @IBOutlet var username: UILabel!
    @IBOutlet weak var logOutButton: UIButton!
    @IBOutlet var points: UILabel!
    
    var questionTexts: [String] = []
    var questionPosters: [String] = []
    var questionTimes: [String] = []
    var questionChannels: [String] = []
    var questionAnswerNumbers: [String] = []
    var userData: [[String: Any]] = []
    var noDataOn = false

    var answerCount  = -1

    var currentPFP = ""
    // edit
    var rank = ""
    
    var status = "question"
    
    let noDataImage = UIImage(named: "nodata.jpg")
    let myImageView:UIImageView = UIImageView()
    let myView = UIView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height))
    
    lazy var refresher : UIRefreshControl =
       {
           let refreshControl = UIRefreshControl()
           refreshControl.addTarget(self, action: #selector(requestData), for: .valueChanged)
           return refreshControl
       }()
       @objc func requestData()
       {
        
        genUserData()
        
           let deadline = DispatchTime.now() + .milliseconds(2000)
           DispatchQueue.main.asyncAfter(deadline: deadline)
           {
               self.refresher.endRefreshing()
           }
           
       }
    
    lazy var functions = Functions.functions()

    
    
    func addNoContent() {
        view.addSubview(myView)
        view.addSubview(myImageView)
    }
    
    func removeNoContent() {
        myView.removeFromSuperview()
        myImageView.removeFromSuperview()
    }
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setUpElements()
        
        
        super.viewDidLoad()
        genUserData()
        self.tabBarController?.delegate = self
        profileTableView.refreshControl = refresher
        profileTableView.delegate = self
        profileTableView.dataSource = self
        // need none image to be same color image as background color (basically invisable)
        
        
        
        
        myView.backgroundColor = .white

        myImageView.contentMode = UIView.ContentMode.scaleAspectFit
        myImageView.frame.size.width = UIScreen.main.bounds.width
        myImageView.frame.size.height = UIScreen.main.bounds.height
        myImageView.center = self.view.center
        myImageView.image = noDataImage
        



        // Do any additional setup after loading the view.
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("this runs")
        
        rankingImg.alpha = 0
        
        
        if rank == "first" {
            rankingImg.alpha = 1

            rankingImg.image = UIImage(named:"first")

        } else if rank == "second" {
            rankingImg.alpha = 1

            rankingImg.image = UIImage(named:"second")
        } else if rank == "third" {
            rankingImg.alpha = 1

            rankingImg.image = UIImage(named:"third")
        }
        
        
        
            super.viewDidAppear(animated)
            print("this runs")
            print(UserData.justChangedPFP )
            print(UserData.currentPFP)
            if UserData.justChangedPFP && UserData.currentPFP != ""
            {
                
                self.profileImg.image = UIImage(named: UserData.currentPFP)
                self.profileImg.layer.cornerRadius = self.profileImg.frame.size.width / 2
                self.profileImg.clipsToBounds = true
                UserData.justChangedPFP = false
                UserData.currentPFP = ""
                
            }
            else
            {
                self.setUpElements()
            }
            

        
        
        
        
    }
    
    
    @IBAction func didTapQuestions(_ sender: Any) {
        questionsButton.setTitleColor(UIColor.systemBlue, for: .normal)
        answersButton.setTitleColor(UIColor.lightGray, for: .normal)
        
        if noDataOn == true {
            removeNoContent()
        }
        
        
        status = "question"
        
        
        
    }

    @IBAction func didTapAnswers(_ sender: Any) {
        questionsButton.setTitleColor(UIColor.lightGray, for: .normal)
        answersButton.setTitleColor(UIColor.systemBlue, for: .normal)
        
        if noDataOn == true {
            removeNoContent()
        }
        
        status = "answer"
        

    }
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        if status == "answer" {
           
            return 255
            
        } else {
            
            return 255
        }
        
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if status == "answer" {
            return answerData.count
        } else {
            return questionData.count
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if status == "answer" {
            let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! MyPastAnswerTableViewCell
            
            let creationTime = self.answerData[indexPath.row]["CreationTime"] as! [String: Double]
            let seconds = creationTime["_seconds"] as! Double+pow(creationTime["_nanoseconds"] as! Double, -9.0)
            let creationDate = NSDate(timeIntervalSince1970: seconds)
            let creationDateString = formatter.string(from: creationDate as Date)
            let answerTexts = self.answerData[indexPath.row]["AnswerText"] as! String
            let answerPosters = self.answerData[indexPath.row]["ResponderID"] as! String
            let answerChannel = self.answerData[indexPath.row]["ChannelName"] as! String
            
            
            
            // assign variables to table view cell
            
            return cell
        } else {
            let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! MyPastQuestionTableViewCell
            
            let creationTime = self.questionData[indexPath.row]["CreationTime"] as! [String: Double]
            let seconds = creationTime["_seconds"] as! Double+pow(creationTime["_nanoseconds"] as! Double, -9.0)
            let creationDate = NSDate(timeIntervalSince1970: seconds)
            let creationDateString = formatter.string(from: creationDate as Date)
            let questionTexts = self.questionData[indexPath.row]["QuestionText"] as! String
            let questionPosters = self.questionData[indexPath.row]["QuestionPoster"] as! String
            let questionChannel = self.questionData[indexPath.row]["ChannelName"] as! String
            
            // assign var
            
            return cell
        }
    }
    
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
            
        if status == "answer" {
            
            profileTableView.deselectRow(at: indexPath, animated: true)
            
            UserData.currentChannel = self.answerData[indexPath.row]["ChannelName"] as! String
            UserData.currentQuestion = self.answerData[indexPath.row]["QuestionID"] as! String
            UserData.currentAnswer = self.answerData[indexPath.row]["AnswerText"] as! String
            
            
            
            
        } else {
            profileTableView.deselectRow(at: indexPath, animated: true)

            UserData.currentChannel = self.questionData[indexPath.row]["ChannelName"] as! String
            UserData.currentQuestion = self.questionData[indexPath.row]["QuestionText"] as! String
            
            
            performSegue(withIdentifier: "toAnswers", sender: self)
        }
        
    }
    
    var questionData:[[String:Any]] = []
    var answerData:[[String:Any]] = []
    
    
    func genUserData()
    {
        
        
        self.performSegue(withIdentifier: "pastQuestionsToLoading", sender: self)

        questionData = []
        answerData = []

        self.profileTableView.reloadData()
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .short
        dateFormatter.timeStyle = .short

        let userID = UserData.currentUser
        print(userID)
        print("here is the user id")
        functions.httpsCallable("genUserQuestions").call(["userName": userID])
        { (Res, err) in
            if let err = err as NSError?
            {
                if err.domain == FunctionsErrorDomain
                {
                    _ = err.localizedDescription
                    _ = err.userInfo[FunctionsErrorDetailsKey]
                }
            }

            if let questionsdb = (Res?.data as? [String: Any])?["questionList"] as? [[String: Any]]
            {
                self.questionData = questionsdb
            }
            functions.httpsCallable("genUserAnswers").call(["userName": userID]) { (Result, error) in
                if let errors = error as NSError?
                {
                    if errors.domain == FunctionsErrorDomain
                    {
                        _ = errors.localizedDescription
                        _ = errors.userInfo[FunctionsErrorDetailsKey]
                    }
                }

                if let answersdb = (Res?.data as? [String: Any])?["answerList"] as? [[String: Any]]
                {
                    self.answerData = answersdb
                }
                self.profileTableView.reloadData()
            }
        }
    }
    
    func tabBarController(_ tabBarController: UITabBarController, didSelect viewController: UIViewController) {
        let tabBarIndex = tabBarController.selectedIndex
        print("rayayan")
        if tabBarIndex != 4 && noDataOn
        {
            dismiss(animated:true, completion:nil)
            noDataOn = false
        }
    }
    
    
    
    func setUpElements() {

        let db = Firestore.firestore()
        let user = Auth.auth().currentUser
        let uid = user!.uid

        let docRef = db.collection("users").document(uid)

        docRef.getDocument { (document, error) in
            if let document = document, document.exists {
                let dataDictionary = document.data()!
                let fullName = dataDictionary["username"] as! String
                let picture = dataDictionary["profileImg"] as! String
                let points = dataDictionary["points"] as !String
                UserData.currentUser = fullName
                self.points.text = points + " points"
                self.username.text = fullName
                self.profileImg.image = UIImage(named: picture)
                self.profileImg.layer.cornerRadius = self.profileImg.frame.size.width / 2
                self.profileImg.clipsToBounds = true
            } else {
                print("Document does not exist")
            }
        }

    }

    func transitionToStart() {

        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let mainTabBarController = storyboard.instantiateViewController(identifier: "startStoryBoard")

        (UIApplication.shared.connectedScenes.first?.delegate as? SceneDelegate)?.changeRootViewController(mainTabBarController)
    }


    @IBAction func logOutButtonTapped(_ sender: Any) {
        
        GIDSignIn.sharedInstance()?.signOut()
        
        let auth = Auth.auth()
        do {
            try auth.signOut()
            transitionToStart()

        } catch let signOutError as Error {
            self.present(Utilities.createAlertController(title: "Error", message: signOutError.localizedDescription), animated: true, completion: nil)
        }

    }
    
    
    
            
    lazy var refresher : UIRefreshControl =
       {
           let refreshControl = UIRefreshControl()
           refreshControl.addTarget(self, action: #selector(requestData), for: .valueChanged)
           return refreshControl
       }()
       @objc func requestData()
       {
        answerTexts = []
        answerPosters = []
        answerData = []
        answerLikes = []
        answerReplies = []
        answerTimes = []
        answerOrder = []
        replyCreationTimes = []
        replierIDs = []
        replieTexts = []
        answerTextsStorage = []
        self.profileTableView.reloadData()
       self.genAnswerList()
        Timer.scheduledTimer(withTimeInterval: 3, repeats: false)
        {
            (Timer) in
            self.profileTableView.reloadData()
            self.refresher.endRefreshing()
            Timer.invalidate()
        }

           
       }
    
    lazy var functions = Functions.functions()
    
    
    func tabBarController(_ tabBarController: UITabBarController, didSelect viewController: UIViewController) {
        let tabBarIndex = tabBarController.selectedIndex
        print("rayayan")
        if tabBarIndex != 4 && noDataOn
        {
            dismiss(animated:true, completion:nil)
            noDataOn = false
        }
   }
    
    
    @IBAction func backFromModal(_ segue: UIStoryboardSegue) {

        self.tabBarController?.selectedIndex = 1
    }
    
    @IBAction func backtoProfile(_ segue: UIStoryboardSegue)
         {
            Timer.scheduledTimer(withTimeInterval: 1, repeats: false) { (Timer) in
                
            
           print("thidfs runs")
                  print(UserData.justChangedPFP )
                  print(UserData.currentPFP)
                  if UserData.justChangedPFP && UserData.currentPFP != ""
                  {
                      
                      self.profileImg.image = UIImage(named: UserData.currentPFP)
                      self.profileImg.layer.cornerRadius = self.profileImg.frame.size.width / 2
                      self.profileImg.clipsToBounds = true
                      UserData.justChangedPFP = false
                      UserData.currentPFP = ""
                      
                  }
                Timer.invalidate()
            }
         }

}
